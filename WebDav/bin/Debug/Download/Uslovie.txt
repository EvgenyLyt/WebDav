в c# технология WCF
	+ позволяет реализовать класс и интерфейс для него
	+ класс крутится на сервере->вызываются его методы
	+ генерируется реализация интерфейса для клиента

		Пример
[ServiceContruct]
interface ICalculator
{
	[OperationContruct]
	int Add(int, int)
}
//эта штука реализует серверный контракт
//частью контракта является возвращаемый результат
//ограничения на выходные значения - постусловия
/*контракт разделяется на
	-контракт операций
	-контракт данных
Нужно реализовать:
	1) Сервисный контракт
	2) Контракт данных*/
Рефлексия - это когда в сборке сохраняются данные о структуре кода.
Можно сказать исполнительной среде загрузить не по ссылке,
а по строчке. Я могу заранее не знать классы, которые крутятся в при-
ложение, но работать с ними. Можно находить всем методы с 
конкретной сигнатурой.

	CreateInstance - создание объекта, не зная конкретный класс.

	Атрибуты - метаинформация. Позволяют добавить к исполняемому коду
информацию, описывающую его поведение. Используется сторонними
библиотеками.

	DataContruct должен реализовывать определённые свойства.
Если над property не указать [DataMember], то она не 
будет передаваться.

	Сереализация - представление классов в виде структ. данных,
которую можно сохранить или передать по сети. В C# там 
сохраняются ещё метаданные.
Виды сереализации:
1) кусок байт
2) XML
3) jayson(может быть неверно написано)
Обычно передают в бинарном виде по TCP. В настройках XML 
tackbinding ставим TCP или UDP.

!!!	Каждый SOAP серви выдаёт URL, заканчивающийся .svc, который может
быть сгенерирован в клиента.(генерация класс до компиляции)

!!!	Случай, когда заранее не знаешь интерфейс класса. ChannelFactory

!!!	Proxy - класс, который имитирует определённое поведение, но на
самом деле не делает этого.

	Маршалинг(сходен с сереализацией) - передача кода. Ещё когда из управляемой
среды идёт вызов в неуправляемую используется.

	Наша задача:
Берём аналоге WCF и пилим чат с разделением по каналом и приватными сообщениями.
Основные функциональные возможности:
	1) Вход в чат;
	2) Ограничения чатов по пользователям(комнаты);
	3) Приватный чат.
!!!	Многопоточность не требуется.
Нужно:
	1)Использование системы контроля версий
	2)Выносить логику работы приложения в отдельные класс.